##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

#log_format variables 'Content-Type: $sent_http_content_type; Lenght: $sent_http_content_lenght; Location: $sent_http_location; Modofied: $sent_http_last_modified; Conexion Http: $sent_http_connection; Keep-Alive: $sent_http_keep_alive; Codified: $sent_http_transfer_encoding;Cache control: $sent_http_cache_control';

server {
	listen 80 default_server;
	listen [::]:80 default_server; #ipv6

    #rewrite ^ https://$http_host/;
    #return 301 https://$http_host/;

	# SSL configuration

	#listen 443 ssl default_server;
	#listen [::]:443 ssl default_server; #ipv6
	
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.php index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	#error_page 500 404 404.html;
	#error_page 404 =200 @error;
	#error_page 404 =200 http://$server_name/404.html;
	error_page 404 =200 http://$http_host/404.html;

	location @error{
		#rewrite ^ 404.html permanent;
		rewrite ^ http://$http_host/404.html permanent;
	}

	# pass PHP scripts to FastCGI server
	#
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	
		# With php-fpm (or other unix sockets):
		fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;

		# With php-cgi (or other tcp sockets):
        #fastcgi_pass 127.0.0.1:9000; #change in /etc/php/7.4/fpm/pool/www.conf
        #fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #include fastcgi_params;
	}

    #view files in directory
    #location /files {
    #    autoindex on;
    #    autoindex_exact_size on;
    #    autoindex_localtime on;
    #    autoindex_format json; #xml, html, json
    #}

    #location  /admin {
    #   alias /var/www/admin;
    #}

    #location /redirect {
    #   try_files /redi/redirect.html @redirect;
    #}

    #location @redirect{
    #   rewrite ^ http://$server_name/redirect.html;
    #}

    #location /other{
    #   rewrite ^ http://192.18.56.1:200/ permanent;
    #}

    #access_log /var/log/nginx/variables.log variables;
    #large_client_header_buffers 4 1024k;
    #location /variables {
    #   rewrite ^ http://$http_host/index.php?user=$http_user_agent&referer=$http_referer;
    #   #rewrite ^ http://$http_host/index.php?via=$http_via&referer=$http_referer; #view proxy
    #   #rewrite ^ http://$http_host/index.php?forwarded=$http_x_forwarded_for&referer=$http_referer; #view proxy
    #}

    #location /nginx {
    #   rewrite ^ http://$http_host/?args=$args&id=$arg_id&version?$nginx_version ;
    #}

    #location =/nginx { #is equal
    #location ~^/nginx$ { #is equal estrict upper o lower
    #location ~*^/nginx$ { #not important is upper o lower
    #   rewrite ^ http://$http_host/menu.html ;
    #}

    #location /request {
    #   rewrite ^ http://$http_host/ ;
    #}

    #location /locate {
    #   rewrite ^ http://$http_host/sitio1.html;
    #   }

    #location =/locate {
    #   rewrite ^ http://$http_host/sitio2.html;
    #   }

    #location ^~^/locate {
    #   rewrite ^ http://$http_host/sitio3.html;
    #   }

    #location ~*^/locate {
    #   rewrite ^ http://$http_host/sitio4.html;
    #   }

    #location ~^/LOCATE {
    #   rewrite ^ http://$http_host/sitio5.html;
    #   }

	#rewrite ^/(hellow*|bye)$ /rewrite.html; #http://HOST/hellow
	#* puede estar mas de una vez
	#+ puede estar al menos una vez
	#? optional
	#{x} cantidad de veces entre comillas
	#{x,y} entre x a y cantidad
	#{x,} al menos x veces

	#url amigables
	#http://HOST/4/45/python"
	#http://HOST/?id=4&p=45&name=python"
	#rewrite ^/([1-9][0-9]*)/([1-9][0-9]*)/([a-zA-Z-]+)$ /index.php?id=$1&p=$2&name=$3;
    #rewrite ^/([a-z]+)/([1-9][0-9]*)/([a-z]+)/(.+)$ /$1.php?id=$2&user=$3 last;
    #rewrite ^/([a-z]+)/(.+)/(.+)/(.+)$ /index.php?page=$1&p1=$2&p2=$3&p3=$4;
    #rewrite "^/([1-2][09][0-9]{2})/([0-9]{2})/([0-9]{2})/([0-9]+)-(.+)$" /index.php?year=$1&mon=$2&day=$3&id=$4&title=$5 last; #las no evalua otra regla mas
    #break evalua y no busca otra conincidencia de regla

	#location /files/ {
	#	internal; #dont entry here
	#	alias /var/www/html/files/; #set alias
	#}

	#location /downloads/ {
	#	rewrite ^/downloads/(.*) /files/$1 ;
	#	#(.*) any values
	#}

	#if (-e $request_filename) {
	#	break; # if file exits no considered bellow
	#}
	#rewrite ^(.*)$ /$1.php; #write whitout extension from webrowser

    #location / {
    #    if ($server_port = 80) {
    #        return 500;
    #    }
    #}

    #location /files {
    #    if ($request_filename ~* ^(.+)\.zip$) {
    #        return 404; #error file not exists
    #    }
    #}

    #if (!-f $request_filename) {
    #    rewrite ^ http://$http_host/index.php; #file not exists redirect to index.php
    #}

    #location /directory {
    #    if (-d $request_filename) { #if directoy exists
    #        #return 400; #bad error 
    #        #break; #not considered
    #    }    
    #}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}

server {
    #listen 443 ssl default_server;
    #listen [::]:443 ssl default_server;

    #ssl on;
    #ssl_certificate /etc/nginx/ssl/nginx.crt;
    #ssl_certificate_key /etc/nginx/ssl/nginx.key;

    #root /var/www/html;

    #index index.html;
    #autoindex on;

    #server_name _;
    
    #location / {
    #	proxy_pass $cheme://servs: #sheme para recibir https mismo certificado
    #}
}

#upstream servs{
#	server 192.168.4.101: #https mismo certificado
#	server 192.168.4.102 backup; #https mismo certificado
#}

#proxy inverse
#server {
#    listen 8080 default_server;
#    root /var/www/html;
#    index index.nginx-debian.html;
#    autoindex on;

#    location ~* \.php$ {
#        proxy_set_header X-Real-IP $host;
#        proxy_set_header Host $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

#        #proxy_set_header Host $host:$server_port;
#        #proxy_set_header X-Real-IP $remote_addr;

#        proxy_pass http://67.205.136.164;
#    }
#}

server {
    #virtual host
    listen 80;
    root /var/www/html;
    server_name www.nginx.mt2h.cl nginx.mt2h.cl;
    index index.html index.php;
}

server {
    #virtual host
    listen 80;
    #listen 8080;
    root /var/www/html;
    server_name www.test.mt2h.cl test.mt2h.cl;
    index index.html index.php;
}

#server {
#    listen 8080 default_server;
#    root /var/www/html;
#    index index.html;
#    autoindex on;

#    location ~* \.html$ {
#        proxy_pass http://67.205.136.164;
#    }
#}

#server{
#	listen 192.168.56.1:200;
#	root /svr/www/html;
#	index index.html
#}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
